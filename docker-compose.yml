# docker-compose.yml
# Local development environment for Umzugshilfe Job Auto-Applier

version: "3.8"

services:
  # Main application container
  umzugshilfe-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: umzugshilfe-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DEBUG_MODE=true
      - LOCAL_DEVELOPMENT=true
      - PLAYWRIGHT_BROWSERS_PATH=/usr/lib/playwright
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./docs:/app/docs
      - /app/node_modules
    depends_on:
      - localstack
      - redis
    networks:
      - umzugshilfe-network
    restart: unless-stopped

  # LocalStack for AWS services emulation
  # localstack:
  #   image: localstack/localstack:latest
  #   container_name: localstack
  #   ports:
  #     - "4566:4566" # LocalStack gateway
  #     - "4571:4571" # LocalStack dashboard
  #   environment:
  #     - SERVICES=lambda,dynamodb,sns,s3,cloudformation,logs,events
  #     - DEBUG=1
  #     - DATA_DIR=/tmp/localstack/data
  #     - LAMBDA_EXECUTOR=docker-reuse
  #     - DOCKER_HOST=unix:///var/run/docker.sock
  #     - HOST_TMP_FOLDER=/tmp/localstack
  #   volumes:
  #     - "/tmp/localstack:/tmp/localstack"
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #   networks:
  #     - umzugshilfe-network

  localstack:
    image: localstack/localstack:latest
    environment:
      - SERVICES=s3,dynamodb,lambda
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
    volumes:
      - "./tmp/localstack:/tmp/localstack" # Add this if missing
      - "/var/run/docker.sock:/var/run/docker.sock" # Add this if missing
    ports:
      - "4566:4566"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - umzugshilfe-network
    command: redis-server --appendonly yes
    restart: unless-stopped

  # DynamoDB local for testing
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-inMemory"]
    networks:
      - umzugshilfe-network

  # Test runner service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: test-runner
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./test-results:/app/test-results
    environment:
      - NODE_ENV=test
      - CI=true
      - PLAYWRIGHT_BROWSERS_PATH=/usr/lib/playwright
    depends_on:
      - localstack
      - redis
    networks:
      - umzugshilfe-network
    profiles:
      - testing
    command: npm test

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - umzugshilfe-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - umzugshilfe-network
    profiles:
      - monitoring

  # Development tools
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - umzugshilfe-network
    profiles:
      - tools

networks:
  umzugshilfe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
# Development commands:
# docker-compose up -d                          # Start core services
# docker-compose --profile testing up -d        # Include testing services
# docker-compose --profile monitoring up -d     # Include monitoring
# docker-compose --profile tools up -d          # Include dev tools
#
# Useful URLs:
# - Application: http://localhost:3000
# - LocalStack: http://localhost:4566
# - Grafana: http://localhost:3001 (admin/admin)
# - Prometheus: http://localhost:9090
# - MailHog: http://localhost:8025
# - DynamoDB Admin: http://localhost:8000
