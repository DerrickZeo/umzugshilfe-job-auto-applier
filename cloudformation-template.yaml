AWSTemplateFormatVersion: "2010-09-09"
Description: "Simplified Umzugshilfe Job Auto-Applier - Node.js on t2.micro with fixed Playwright deps"

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access

  MyIPAddress:
    Type: String
    Description: Your IP address for SSH access (get from ifconfig.me)
    AllowedPattern: ^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$
    ConstraintDescription: Must be a valid IP address (x.x.x.x)

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t3.micro, t3.small]
    Description: EC2 instance type

  LoginUsername:
    Type: String
    Description: Umzugshilfe login username
    NoEcho: true

  LoginPassword:
    Type: String
    Description: Umzugshilfe login password
    NoEcho: true

  EmailAddress:
    Type: String
    Description: Gmail address for sending emails
    NoEcho: false

  EmailPassword:
    Type: String
    Description: Gmail app password (16 characters from Google Account)
    NoEcho: true

  SMTPHost:
    Type: String
    Default: smtp.gmail.com
    Description: SMTP server hostname

  SMTPPort:
    Type: Number
    Default: 587
    Description: SMTP server port

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    Description: Latest Amazon Linux 2023 AMI ID

Resources:
  # Security Group - Restricted to your IP only
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Umzugshilfe instance - SSH restricted to your IP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub "${MyIPAddress}/32"
          Description: SSH access from your IP only
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sg"

  # Systems Manager Parameters for credentials
  LoginUsernameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/username"
      Type: String
      Value: !Ref LoginUsername

  LoginPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/password"
      Type: String
      Value: !Ref LoginPassword

  EmailAddressParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/email-address"
      Type: String
      Value: !Ref EmailAddress

  EmailPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/email-password"
      Type: String
      Value: !Ref EmailPassword

  SMTPHostParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/smtp-host"
      Type: String
      Value: !Ref SMTPHost

  SMTPPortParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/smtp-port"
      Type: String
      Value: !Ref SMTPPort

  # IAM Role for EC2 instance
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GetSSMParameters
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  # EC2 Instance
  UmzugshilfeInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          echo "Starting user data script at $(date)"

          # Update system
          yum update -y

          # Install Node.js 18
          curl -sL https://rpm.nodesource.com/setup_18.x | bash -
          yum install -y nodejs git

          # Install Playwright system dependencies for Amazon Linux 2023
          echo "Installing Playwright dependencies for Amazon Linux 2023..."
          yum groupinstall -y "Development Tools"

          # Install core Playwright runtime dependencies
          yum install -y \
              atk \
              at-spi2-atk \
              cups-libs \
              libxcb \
              libxkbcommon \
              libX11 \
              libXcomposite \
              libXdamage \
              libXext \
              libXfixes \
              libXrandr \
              mesa-libgbm \
              cairo \
              pango \
              alsa-lib \
              gtk3

          # Install additional required libraries
          yum install -y \
              libdrm \
              libxshmfence \
              libXScrnSaver \
              libXtst \
              nss \
              nspr

          # Install development packages for compilation
          yum install -y \
              libX11-devel \
              libXcomposite-devel \
              libXcursor-devel \
              libXdamage-devel \
              libXext-devel \
              libXfixes-devel \
              libXi-devel \
              libXrandr-devel \
              libXrender-devel \
              libXScrnSaver-devel \
              libXtst-devel \
              libXinerama-devel \
              cairo-devel \
              pango-devel \
              atk-devel \
              at-spi2-atk-devel \
              gtk3-devel \
              gdk-pixbuf2-devel \
              libdrm-devel \
              libxkbcommon-devel \
              mesa-libgbm-devel \
              alsa-lib-devel \
              cups-devel

          # Clone application
          cd /home/ec2-user
          git clone https://github.com/DerrickZeo/umzugshilfe-job-auto-applier.git
          cd umzugshilfe-job-auto-applier
          chown -R ec2-user:ec2-user .

          # Get credentials from SSM
          USERNAME=$(aws ssm get-parameter --region ${AWS::Region} --name "/${AWS::StackName}/username" --with-decryption --query Parameter.Value --output text)
          PASSWORD=$(aws ssm get-parameter --region ${AWS::Region} --name "/${AWS::StackName}/password" --with-decryption --query Parameter.Value --output text)
          EMAIL_ADDRESS=$(aws ssm get-parameter --region ${AWS::Region} --name "/${AWS::StackName}/email-address" --query Parameter.Value --output text)
          EMAIL_PASSWORD=$(aws ssm get-parameter --region ${AWS::Region} --name "/${AWS::StackName}/email-password" --with-decryption --query Parameter.Value --output text)
          SMTP_HOST=$(aws ssm get-parameter --region ${AWS::Region} --name "/${AWS::StackName}/smtp-host" --query Parameter.Value --output text)
          SMTP_PORT=$(aws ssm get-parameter --region ${AWS::Region} --name "/${AWS::StackName}/smtp-port" --query Parameter.Value --output text)

          # Create environment file
          cat > .env << EOF
          NODE_ENV=production
          PORT=3000
          LOGIN_USERNAME=$USERNAME
          LOGIN_PASSWORD=$PASSWORD
          EMAIL_ADDRESS=$EMAIL_ADDRESS
          EMAIL_PASSWORD=$EMAIL_PASSWORD
          SMTP_HOST=$SMTP_HOST
          SMTP_PORT=$SMTP_PORT
          EMAIL_SECURE=true
          EOF

          # Install dependencies as ec2-user
          sudo -u ec2-user npm install

          # Install Playwright browsers as ec2-user (with force to bypass OS check)
          echo "Installing Playwright browsers..."
          sudo -u ec2-user npx playwright install chromium --force || true

          # Create systemd service for Node.js application
          cat > /etc/systemd/system/umzugshilfe.service << 'SVCEOF'
          [Unit]
          Description=Umzugshilfe Job Auto-Applier (Node.js)
          After=network.target

          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/home/ec2-user/umzugshilfe-job-auto-applier
          ExecStart=/usr/bin/node app.js
          Restart=always
          RestartSec=10
          Environment=NODE_ENV=production
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target
          SVCEOF

          # Enable and start the service
          systemctl daemon-reload
          systemctl enable umzugshilfe

          # Wait a moment for dependencies to settle
          sleep 5

          # Start the service
          systemctl start umzugshilfe

          echo "User data script completed at $(date)"

      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-instance"

Outputs:
  InstancePublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt UmzugshilfeInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub "ssh -i ${KeyPairName}.pem ec2-user@${UmzugshilfeInstance.PublicIp}"
    Export:
      Name: !Sub "${AWS::StackName}-SSHCommand"

  ApplicationHealthCheck:
    Description: Health check command (run from SSH)
    Value: "curl -s http://localhost:3000/health"
    Export:
      Name: !Sub "${AWS::StackName}-HealthCheck"

  ServiceStatus:
    Description: Check service status command
    Value: "sudo systemctl status umzugshilfe"
    Export:
      Name: !Sub "${AWS::StackName}-ServiceStatus"

  ViewLogs:
    Description: View application logs command
    Value: "sudo journalctl -u umzugshilfe -f"
    Export:
      Name: !Sub "${AWS::StackName}-ViewLogs"
